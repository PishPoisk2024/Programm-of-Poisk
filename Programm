import tkinter
import customtkinter
from tkinter import *
from tkinter import ttk
from tkintermapview import TkinterMapView
import time
import threading
import math
import serial

def rx_data():
    portRx = serial.Serial('COM5', baudrate=115200)
    while True:
        data = portRx.readline()
        if not data:
            continue
        # Декодируем байтовую строку
        decoded_data = data.decode('utf-8')
        # Удаляем лишние пробелы и переносы строк
        cleaned_data = decoded_data.strip()
        # Разделяем строку на отдельные значения
        values = cleaned_data.split()

        if len(values) < 7:
            print(f"Invalid data format: {cleaned_data}")
            continue

        imsi = int(values[5])
        RSSI = int(values[6])
        RXLev = int(values[2])
        TA = int(values[3])
        TE = int(values[4])
        lat = float(values[0])
        lon = float(values[1])
        msisdn = int(values[7])

        yield imsi, RSSI, RXLev, TA, TE, lat, lon, msisdn

class App(customtkinter.CTk, tkinter.Tk):

    APP_NAME = "Поиск с БПЛА" #Название программы
    WIDTH = 1850 #Ширина окна
    HEIGHT = 900 #Высота окна

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.i = 0.0001 #Добавочное значение к координатам
        self.imsi = 0
        self.RSSI = 0
        self.RXLev = 0
        self.TA = 0
        self.TE = 0
        self.lat = 56.4519127
        self.lon = 84.9622607
        self.msisdn = 0
        self.marker_list = [] #Лист с маркерами для их очистки
        self.map_updated = False # Флаг для отслеживания состояния обновления карты
        self.known_imsis = {} # Словарь для отслеживания уникальных значений IMSI и их данных
        self.current_selection = None # Текущая выделенная строка

        self.title(App.APP_NAME)
        self.geometry(str(App.WIDTH) + "x" + str(App.HEIGHT))
        self.minsize(App.WIDTH, App.HEIGHT)

        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.bind("<Command-q>", self.on_closing)
        self.bind("<Command-w>", self.on_closing)
        self.createcommand('tk::mac::Quit', self.on_closing)

        # ============ Создание двух областей ============
        self.grid_columnconfigure(0, weight=0)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)

        self.frame_left = customtkinter.CTkFrame(master=self, width=150, corner_radius=0, fg_color=None)
        self.frame_left.grid(row=0, column=0, padx=0, pady=0, sticky="nsew")

        self.frame_right = customtkinter.CTkFrame(master=self, corner_radius=0)
        self.frame_right.grid(row=0, column=1, rowspan=1, pady=0, padx=0, sticky="nsew")

        # ============ Левая область ============
        self.frame_left.grid_rowconfigure(2, weight=1)

        self.map_label = customtkinter.CTkLabel(self.frame_left, text="Образ карты:", anchor="w")
        self.map_label.grid(row=2, column=0, padx=(20, 20), pady=(20, 0))
        self.map_option_menu = customtkinter.CTkOptionMenu(self.frame_left, values=["Google satellite", "Google normal", "OpenStreetMap"],
                                                                       command=self.change_map)
        self.map_option_menu.grid(row=4, column=0, padx=(20, 20), pady=(10, 0))

        # ============ Правая область ============
        self.frame_right.grid_rowconfigure(1, weight=1)
        self.frame_right.grid_rowconfigure(0, weight=0)
        self.frame_right.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_columnconfigure(1, weight=0)
        self.frame_right.grid_columnconfigure(2, weight=1)

        self.map_widget = TkinterMapView(self.frame_right, corner_radius=0)
        self.map_widget.grid(row=1, rowspan=1, column=0, columnspan=3, sticky="nswe", padx=(0, 0), pady=(0, 0))

        self.entry = customtkinter.CTkEntry(master=self.frame_right,
                                            placeholder_text="Введите адресс")
        self.entry.grid(row=0, column=1, sticky="we", padx=(12, 12), pady=12)
        self.entry.bind("<Return>", self.search_event)

        self.frame_right1 = customtkinter.CTkFrame(master=self, corner_radius=0)
        self.frame_right1.grid(row=0, column=2, rowspan=1, pady=0, padx=0, sticky="nsew")

        self.frame_right1.grid_rowconfigure(1, weight=1)
        self.frame_right1.grid_rowconfigure(0, weight=0)
        self.frame_right1.grid_columnconfigure(0, weight=1)
        self.frame_right1.grid_columnconfigure(1, weight=0)
        self.frame_right1.grid_columnconfigure(2, weight=1)

        self.table = ttk.Treeview(columns=("Абонент", "IMSI", "Номер"), show="headings", master=self.frame_right1)
        self.table.heading("Абонент", text="Абонент", anchor="nw")
        self.table.heading("IMSI", text="IMSI", anchor="nw")
        self.table.heading("Номер", text="Номер", anchor="nw")
        self.table.grid(pady=(52, 0), padx=(0, 0), row=0, column=2)
        self.table.bind("<ButtonRelease-1>", self.on_table_click)

        self.imsi_entry = customtkinter.CTkEntry(master=self.frame_right1,
                                                placeholder_text="Введите IMSI")
        self.imsi_entry.grid(pady=(10, 0), padx=(0, 0), row=1, column=2)
        self.imsi_entry.bind("<Return>", self.search_imsi)

        self.mcc_mnc_entry = customtkinter.CTkEntry(master=self.frame_right1,
                                                placeholder_text="Введите MCC_MNC")
        self.mcc_mnc_entry.grid(pady=(10, 50), padx=(0, 0), row=2, column=2)
        self.mcc_mnc_entry.bind("<Return>", self.search_mcc_mnc)

        self.label = tkinter.Label(text="Полезная информация:", master=self.frame_right1,width=60, height=1)
        self.label.grid(pady=(60, 0), padx=(0, 0), row=2, column=2)

        self.output_field = tkinter.Text(master=self.frame_right1, width=75, height=30)
        self.output_field.grid(pady=(10, 0), padx=(0, 0), row=3, column=2)

        self.button_5 = customtkinter.CTkButton(master=self.frame_right,
                                                text="Поиск",
                                                width=90,
                                                command=self.search_event)
        self.button_5.grid(row=0, column=0, sticky="w", padx=(0, 0), pady=0)

        # Установка параметров поумолчанию
        self.map_widget.set_address("Томск")
        self.map_option_menu.set("OpenStreetMap")

        # Установка начальной позиции и метки
        self.update_map()
        self.set_initial_marker()

        # Запуск потока для получения данных
        self.data_thread = threading.Thread(target=self.update_data)
        self.data_thread.daemon = True
        self.data_thread.start()

    def update_map(self):
        self.map_widget.set_position(self.lat, self.lon)  # Установка позиции на метке
        self.map_widget.set_zoom(12)  # Установка приближения на метку

    def set_initial_marker(self):
        marker = self.map_widget.set_marker(self.lat, self.lon)  # Установка метки по широте и долготе
        self.marker_list.append(marker)  # Добавление маркера в маркер лист для дальнейшего удаления

    def update_data(self):
        for data in rx_data():
            self.imsi, self.RSSI, self.RXLev, self.TA, self.TE, self.lat, self.lon, self.msisdn = data
            self.after(0, self.update_ui)
            if not self.map_updated:
                self.map_updated = True
                self.after(0, self.update_map)

    def update_ui(self):
        if self.imsi not in self.known_imsis:
            self.known_imsis[self.imsi] = {
                "RSSI": self.RSSI,
                "RXLev": self.RXLev,
                "TA": self.TA,
                "TE": self.TE,
                "lat": self.lat,
                "lon": self.lon,
                "msisdn": self.msisdn
            }
            abonent_number = len(self.known_imsis)
            self.table.insert("", "end", values=(f"Абонент №{abonent_number}", self.imsi, self.msisdn))
            self.output_field.delete(1.0, END)
            self.output_field.insert("end", f"Абонент №{abonent_number}\nIMSI={self.imsi}\nMSISDN= {self.msisdn}\nRSSI={self.RSSI}\nTA={self.TA}\nRXLev={self.RXLev}\nTE={self.TE}\n\n")
        else:
            self.known_imsis[self.imsi].update({
                "RSSI": self.RSSI,
                "RXLev": self.RXLev,
                "TA": self.TA,
                "TE": self.TE,
                "lat": self.lat,
                "lon": self.lon,
                "msisdn": self.msisdn
            })
            self.output_field.delete(1.0, END)
            self.output_field.insert("end", f"Обновление данных абонента №{list(self.known_imsis.keys()).index(self.imsi) + 1}\nIMSI={self.imsi}\nMSISDN= {self.msisdn}\nRSSI={self.RSSI}\nTA={self.TA}\nRXLev={self.RXLev}\nTE={self.TE}\n\n")

    def search_event(self, event=None):
        self.map_widget.set_address(self.entry.get())

    def search_imsi(self, event=None):
        imsi_to_find = self.imsi_entry.get()
        for item in self.table.get_children():
            values = self.table.item(item, 'values')
            if values and str(values[1]) == imsi_to_find:
                self.table.selection_set(item)
                self.table.focus(item)
                self.table.tag_configure("highlight", background="yellow")
                self.table.item(item, tags=("highlight",))
                break

    def search_mcc_mnc(self, event=None):
        mcc_mnc_to_find = self.mcc_mnc_entry.get()
        for item in self.table.get_children():
            values = self.table.item(item, 'values')
            if values and str(values[1])[:5] == mcc_mnc_to_find:
                self.table.tag_configure("highlight_green", background="green")
                self.table.item(item, tags=("highlight_green",))

    def set_marker_event(self):
        while True:
            marker = self.map_widget.set_marker(self.lat, self.lon) #Установка метки по щироте и долготе
            self.marker_list.append(marker) #Добавление маркера в маркер лист для дальнейшего удаления

            # Создание приблизительного круга с помощью полигона
            radius_x = 0.0032  # предположим, что это радиус овала по оси x в градусах
            radius_y = 0.0057  # предположим, что это радиус овала по оси y в градусах
            num_points = 1000  # количество точек для создания овала
            circle_points = []
            for i in range(num_points):
                angle = math.radians(i * (360.0 / num_points))
                x = self.lat + radius_x * math.cos(angle)
                y = self.lon + radius_y * math.sin(angle)
                circle_points.append((x, y))

            polygon_1 = self.map_widget.set_polygon(circle_points, outline_color="black", border_width=1)  # creates the circle

            # Задержка перед следующим обновлением
            time.sleep(1)

            #Очистка предыдущего маркера и круга
            for marker in self.marker_list:
                marker.delete()
            polygon_1.delete()

    def set_marker_event1(self):
        t = threading.Thread(target=self.set_marker_event)
        t.daemon = True  # Помечаем поток как демон, чтобы он завершился при завершении основного потока
        t.start()

    def change_appearance_mode(self, new_appearance_mode: str):
        customtkinter.set_appearance_mode(new_appearance_mode)

    def change_map(self, new_map: str):
        if new_map == "Google satellite":
            self.map_widget.set_tile_server("https://mt0.google.com/vt/lyrs=s&hl=en&x={x}&y={y}&z={z}&s=Ga", max_zoom=25)
        elif new_map == "Google normal":
            self.map_widget.set_tile_server("https://mt0.google.com/vt/lyrs=m&hl=en&x={x}&y={y}&z={z}&s=Ga", max_zoom=22)
        elif new_map == "OpenStreetMap":
            self.map_widget.set_tile_server("https://a.tile.openstreetmap.org/{z}/{x}/{y}.png")

    def on_closing(self, event=0):
        self.destroy()

    def start(self):
        self.mainloop()

    def on_table_click(self, event):
        selected_item = self.table.selection()
        if selected_item:
            if self.current_selection:
                self.table.item(self.current_selection, tags=())  # Сброс выделения предыдущей строки
            item = self.table.item(selected_item)
            imsi = item['values'][1]
            if imsi in self.known_imsis:
                data = self.known_imsis[imsi]
                self.output_field.delete(1.0, END)
                self.output_field.insert("end", f"Абонент №{list(self.known_imsis.keys()).index(imsi) + 1}\nIMSI={imsi}\nMSISDN= {data['msisdn']}\nRSSI={data['RSSI']}\nTA={data['TA']}\nRXLev={data['RXLev']}\nTE={data['TE']}\n\n")
            self.current_selection = selected_item  # Обновление текущей выделенной строки

if __name__ == "__main__":
    app = App()
    app.set_marker_event1()
    app.start()
